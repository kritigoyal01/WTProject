#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WTProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RecipeBlog")]
	public partial class DBInteractiobDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertCuisine(Cuisine instance);
    partial void UpdateCuisine(Cuisine instance);
    partial void DeleteCuisine(Cuisine instance);
    partial void InsertPostsTagMapper(PostsTagMapper instance);
    partial void UpdatePostsTagMapper(PostsTagMapper instance);
    partial void DeletePostsTagMapper(PostsTagMapper instance);
    partial void InsertRating(Rating instance);
    partial void UpdateRating(Rating instance);
    partial void DeleteRating(Rating instance);
    partial void InsertRatingValue(RatingValue instance);
    partial void UpdateRatingValue(RatingValue instance);
    partial void DeleteRatingValue(RatingValue instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUsertype(Usertype instance);
    partial void UpdateUsertype(Usertype instance);
    partial void DeleteUsertype(Usertype instance);
    partial void InsertFeedback(Feedback instance);
    partial void UpdateFeedback(Feedback instance);
    partial void DeleteFeedback(Feedback instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertNewsletter(Newsletter instance);
    partial void UpdateNewsletter(Newsletter instance);
    partial void DeleteNewsletter(Newsletter instance);
    #endregion
		
		public DBInteractiobDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RecipeBlogConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBInteractiobDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBInteractiobDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBInteractiobDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBInteractiobDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Cuisine> Cuisines
		{
			get
			{
				return this.GetTable<Cuisine>();
			}
		}
		
		public System.Data.Linq.Table<PostsTagMapper> PostsTagMappers
		{
			get
			{
				return this.GetTable<PostsTagMapper>();
			}
		}
		
		public System.Data.Linq.Table<Rating> Ratings
		{
			get
			{
				return this.GetTable<Rating>();
			}
		}
		
		public System.Data.Linq.Table<RatingValue> RatingValues
		{
			get
			{
				return this.GetTable<RatingValue>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Usertype> Usertypes
		{
			get
			{
				return this.GetTable<Usertype>();
			}
		}
		
		public System.Data.Linq.Table<Feedback> Feedbacks
		{
			get
			{
				return this.GetTable<Feedback>();
			}
		}
		
		public System.Data.Linq.Table<Post> Posts
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<Newsletter> Newsletters
		{
			get
			{
				return this.GetTable<Newsletter>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _commentsid;
		
		private string _comments;
		
		private System.Nullable<int> _postsid;
		
		private System.Nullable<int> _user_id;
		
		private System.Nullable<System.DateTime> _date_added;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncommentsidChanging(int value);
    partial void OncommentsidChanged();
    partial void OncommentsChanging(string value);
    partial void OncommentsChanged();
    partial void OnpostsidChanging(System.Nullable<int> value);
    partial void OnpostsidChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    partial void Ondate_addedChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_addedChanged();
    #endregion
		
		public Comment()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commentsid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int commentsid
		{
			get
			{
				return this._commentsid;
			}
			set
			{
				if ((this._commentsid != value))
				{
					this.OncommentsidChanging(value);
					this.SendPropertyChanging();
					this._commentsid = value;
					this.SendPropertyChanged("commentsid");
					this.OncommentsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comments", DbType="VarChar(225)")]
		public string comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				if ((this._comments != value))
				{
					this.OncommentsChanging(value);
					this.SendPropertyChanging();
					this._comments = value;
					this.SendPropertyChanged("comments");
					this.OncommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postsid", DbType="Int")]
		public System.Nullable<int> postsid
		{
			get
			{
				return this._postsid;
			}
			set
			{
				if ((this._postsid != value))
				{
					this.OnpostsidChanging(value);
					this.SendPropertyChanging();
					this._postsid = value;
					this.SendPropertyChanged("postsid");
					this.OnpostsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime")]
		public System.Nullable<System.DateTime> date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="user_id", OtherKey="userid", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._user_id = value.userid;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cuisine")]
	public partial class Cuisine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cuisineid;
		
		private string _cuisinename;
		
		private EntitySet<Post> _Posts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncuisineidChanging(int value);
    partial void OncuisineidChanged();
    partial void OncuisinenameChanging(string value);
    partial void OncuisinenameChanged();
    #endregion
		
		public Cuisine()
		{
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cuisineid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cuisineid
		{
			get
			{
				return this._cuisineid;
			}
			set
			{
				if ((this._cuisineid != value))
				{
					this.OncuisineidChanging(value);
					this.SendPropertyChanging();
					this._cuisineid = value;
					this.SendPropertyChanged("cuisineid");
					this.OncuisineidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cuisinename", DbType="VarChar(225)")]
		public string cuisinename
		{
			get
			{
				return this._cuisinename;
			}
			set
			{
				if ((this._cuisinename != value))
				{
					this.OncuisinenameChanging(value);
					this.SendPropertyChanging();
					this._cuisinename = value;
					this.SendPropertyChanged("cuisinename");
					this.OncuisinenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cuisine_Post", Storage="_Posts", ThisKey="cuisineid", OtherKey="cuisineid")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Cuisine = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Cuisine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PostsTagMapper")]
	public partial class PostsTagMapper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _tagsid;
		
		private System.Nullable<int> _postsid;
		
		private int _id;
		
		private EntityRef<Tag> _Tag;
		
		private EntityRef<Post> _Post;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntagsidChanging(System.Nullable<int> value);
    partial void OntagsidChanged();
    partial void OnpostsidChanging(System.Nullable<int> value);
    partial void OnpostsidChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public PostsTagMapper()
		{
			this._Tag = default(EntityRef<Tag>);
			this._Post = default(EntityRef<Post>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagsid", DbType="Int")]
		public System.Nullable<int> tagsid
		{
			get
			{
				return this._tagsid;
			}
			set
			{
				if ((this._tagsid != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntagsidChanging(value);
					this.SendPropertyChanging();
					this._tagsid = value;
					this.SendPropertyChanged("tagsid");
					this.OntagsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postsid", DbType="Int")]
		public System.Nullable<int> postsid
		{
			get
			{
				return this._postsid;
			}
			set
			{
				if ((this._postsid != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpostsidChanging(value);
					this.SendPropertyChanging();
					this._postsid = value;
					this.SendPropertyChanged("postsid");
					this.OnpostsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_PostsTagMapper", Storage="_Tag", ThisKey="tagsid", OtherKey="tagsid", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.PostsTagMappers.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.PostsTagMappers.Add(this);
						this._tagsid = value.tagsid;
					}
					else
					{
						this._tagsid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_PostsTagMapper", Storage="_Post", ThisKey="postsid", OtherKey="postsid", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.PostsTagMappers.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.PostsTagMappers.Add(this);
						this._postsid = value.postsid;
					}
					else
					{
						this._postsid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rating")]
	public partial class Rating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ratingid;
		
		private System.Nullable<int> _ratingvalueid;
		
		private System.Nullable<int> _postsid;
		
		private EntityRef<RatingValue> _RatingValue;
		
		private EntityRef<Post> _Post;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnratingidChanging(int value);
    partial void OnratingidChanged();
    partial void OnratingvalueidChanging(System.Nullable<int> value);
    partial void OnratingvalueidChanged();
    partial void OnpostsidChanging(System.Nullable<int> value);
    partial void OnpostsidChanged();
    #endregion
		
		public Rating()
		{
			this._RatingValue = default(EntityRef<RatingValue>);
			this._Post = default(EntityRef<Post>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ratingid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ratingid
		{
			get
			{
				return this._ratingid;
			}
			set
			{
				if ((this._ratingid != value))
				{
					this.OnratingidChanging(value);
					this.SendPropertyChanging();
					this._ratingid = value;
					this.SendPropertyChanged("ratingid");
					this.OnratingidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ratingvalueid", DbType="Int")]
		public System.Nullable<int> ratingvalueid
		{
			get
			{
				return this._ratingvalueid;
			}
			set
			{
				if ((this._ratingvalueid != value))
				{
					if (this._RatingValue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnratingvalueidChanging(value);
					this.SendPropertyChanging();
					this._ratingvalueid = value;
					this.SendPropertyChanged("ratingvalueid");
					this.OnratingvalueidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postsid", DbType="Int")]
		public System.Nullable<int> postsid
		{
			get
			{
				return this._postsid;
			}
			set
			{
				if ((this._postsid != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpostsidChanging(value);
					this.SendPropertyChanging();
					this._postsid = value;
					this.SendPropertyChanged("postsid");
					this.OnpostsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RatingValue_Rating", Storage="_RatingValue", ThisKey="ratingvalueid", OtherKey="ratingvalueid", IsForeignKey=true)]
		public RatingValue RatingValue
		{
			get
			{
				return this._RatingValue.Entity;
			}
			set
			{
				RatingValue previousValue = this._RatingValue.Entity;
				if (((previousValue != value) 
							|| (this._RatingValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RatingValue.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._RatingValue.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._ratingvalueid = value.ratingvalueid;
					}
					else
					{
						this._ratingvalueid = default(Nullable<int>);
					}
					this.SendPropertyChanged("RatingValue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Rating", Storage="_Post", ThisKey="postsid", OtherKey="postsid", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._postsid = value.postsid;
					}
					else
					{
						this._postsid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RatingValue")]
	public partial class RatingValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ratingvalueid;
		
		private string _ratingvalue1;
		
		private EntitySet<Rating> _Ratings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnratingvalueidChanging(int value);
    partial void OnratingvalueidChanged();
    partial void Onratingvalue1Changing(string value);
    partial void Onratingvalue1Changed();
    #endregion
		
		public RatingValue()
		{
			this._Ratings = new EntitySet<Rating>(new Action<Rating>(this.attach_Ratings), new Action<Rating>(this.detach_Ratings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ratingvalueid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ratingvalueid
		{
			get
			{
				return this._ratingvalueid;
			}
			set
			{
				if ((this._ratingvalueid != value))
				{
					this.OnratingvalueidChanging(value);
					this.SendPropertyChanging();
					this._ratingvalueid = value;
					this.SendPropertyChanged("ratingvalueid");
					this.OnratingvalueidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ratingvalue", Storage="_ratingvalue1", DbType="VarChar(225)")]
		public string ratingvalue1
		{
			get
			{
				return this._ratingvalue1;
			}
			set
			{
				if ((this._ratingvalue1 != value))
				{
					this.Onratingvalue1Changing(value);
					this.SendPropertyChanging();
					this._ratingvalue1 = value;
					this.SendPropertyChanged("ratingvalue1");
					this.Onratingvalue1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RatingValue_Rating", Storage="_Ratings", ThisKey="ratingvalueid", OtherKey="ratingvalueid")]
		public EntitySet<Rating> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.RatingValue = this;
		}
		
		private void detach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.RatingValue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _tagsid;
		
		private string _tagname;
		
		private EntitySet<PostsTagMapper> _PostsTagMappers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntagsidChanging(int value);
    partial void OntagsidChanged();
    partial void OntagnameChanging(string value);
    partial void OntagnameChanged();
    #endregion
		
		public Tag()
		{
			this._PostsTagMappers = new EntitySet<PostsTagMapper>(new Action<PostsTagMapper>(this.attach_PostsTagMappers), new Action<PostsTagMapper>(this.detach_PostsTagMappers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagsid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int tagsid
		{
			get
			{
				return this._tagsid;
			}
			set
			{
				if ((this._tagsid != value))
				{
					this.OntagsidChanging(value);
					this.SendPropertyChanging();
					this._tagsid = value;
					this.SendPropertyChanged("tagsid");
					this.OntagsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagname", DbType="VarChar(225)")]
		public string tagname
		{
			get
			{
				return this._tagname;
			}
			set
			{
				if ((this._tagname != value))
				{
					this.OntagnameChanging(value);
					this.SendPropertyChanging();
					this._tagname = value;
					this.SendPropertyChanged("tagname");
					this.OntagnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_PostsTagMapper", Storage="_PostsTagMappers", ThisKey="tagsid", OtherKey="tagsid")]
		public EntitySet<PostsTagMapper> PostsTagMappers
		{
			get
			{
				return this._PostsTagMappers;
			}
			set
			{
				this._PostsTagMappers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PostsTagMappers(PostsTagMapper entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_PostsTagMappers(PostsTagMapper entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userid;
		
		private string _name;
		
		private System.Nullable<long> _phone;
		
		private string _email;
		
		private string _username;
		
		private string _pass;
		
		private System.Nullable<int> _subscribed;
		
		private string _img;
		
		private System.Nullable<int> _usertypeid;
		
		private string _gender;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Post> _Posts;
		
		private EntityRef<Usertype> _Usertype;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuseridChanging(int value);
    partial void OnuseridChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnphoneChanging(System.Nullable<long> value);
    partial void OnphoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpassChanging(string value);
    partial void OnpassChanged();
    partial void OnsubscribedChanging(System.Nullable<int> value);
    partial void OnsubscribedChanged();
    partial void OnimgChanging(string value);
    partial void OnimgChanged();
    partial void OnusertypeidChanging(System.Nullable<int> value);
    partial void OnusertypeidChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    #endregion
		
		public User()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._Usertype = default(EntityRef<Usertype>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(225)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="BigInt")]
		public System.Nullable<long> phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(225)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(225)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pass", DbType="NVarChar(225)")]
		public string pass
		{
			get
			{
				return this._pass;
			}
			set
			{
				if ((this._pass != value))
				{
					this.OnpassChanging(value);
					this.SendPropertyChanging();
					this._pass = value;
					this.SendPropertyChanged("pass");
					this.OnpassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subscribed", DbType="Int")]
		public System.Nullable<int> subscribed
		{
			get
			{
				return this._subscribed;
			}
			set
			{
				if ((this._subscribed != value))
				{
					this.OnsubscribedChanging(value);
					this.SendPropertyChanging();
					this._subscribed = value;
					this.SendPropertyChanged("subscribed");
					this.OnsubscribedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_img", DbType="VarChar(8000)")]
		public string img
		{
			get
			{
				return this._img;
			}
			set
			{
				if ((this._img != value))
				{
					this.OnimgChanging(value);
					this.SendPropertyChanging();
					this._img = value;
					this.SendPropertyChanged("img");
					this.OnimgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usertypeid", DbType="Int")]
		public System.Nullable<int> usertypeid
		{
			get
			{
				return this._usertypeid;
			}
			set
			{
				if ((this._usertypeid != value))
				{
					if (this._Usertype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnusertypeidChanging(value);
					this.SendPropertyChanging();
					this._usertypeid = value;
					this.SendPropertyChanged("usertypeid");
					this.OnusertypeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="VarChar(25)")]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="userid", OtherKey="user_id")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Post", Storage="_Posts", ThisKey="userid", OtherKey="userid")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usertype_User", Storage="_Usertype", ThisKey="usertypeid", OtherKey="usertypeid", IsForeignKey=true)]
		public Usertype Usertype
		{
			get
			{
				return this._Usertype.Entity;
			}
			set
			{
				Usertype previousValue = this._Usertype.Entity;
				if (((previousValue != value) 
							|| (this._Usertype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usertype.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Usertype.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._usertypeid = value.usertypeid;
					}
					else
					{
						this._usertypeid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Usertype");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Usertype")]
	public partial class Usertype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _usertypeid;
		
		private string _uservalues;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusertypeidChanging(int value);
    partial void OnusertypeidChanged();
    partial void OnuservaluesChanging(string value);
    partial void OnuservaluesChanged();
    #endregion
		
		public Usertype()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usertypeid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int usertypeid
		{
			get
			{
				return this._usertypeid;
			}
			set
			{
				if ((this._usertypeid != value))
				{
					this.OnusertypeidChanging(value);
					this.SendPropertyChanging();
					this._usertypeid = value;
					this.SendPropertyChanged("usertypeid");
					this.OnusertypeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uservalues", DbType="VarChar(225)")]
		public string uservalues
		{
			get
			{
				return this._uservalues;
			}
			set
			{
				if ((this._uservalues != value))
				{
					this.OnuservaluesChanging(value);
					this.SendPropertyChanging();
					this._uservalues = value;
					this.SendPropertyChanged("uservalues");
					this.OnuservaluesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usertype_User", Storage="_Users", ThisKey="usertypeid", OtherKey="usertypeid")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Usertype = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Usertype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Feedback")]
	public partial class Feedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _feedbackid;
		
		private string _feedbackname;
		
		private string _feedbackemail;
		
		private string _feedbackmessage;
		
		private string _feedbacksubject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfeedbackidChanging(int value);
    partial void OnfeedbackidChanged();
    partial void OnfeedbacknameChanging(string value);
    partial void OnfeedbacknameChanged();
    partial void OnfeedbackemailChanging(string value);
    partial void OnfeedbackemailChanged();
    partial void OnfeedbackmessageChanging(string value);
    partial void OnfeedbackmessageChanged();
    partial void OnfeedbacksubjectChanging(string value);
    partial void OnfeedbacksubjectChanged();
    #endregion
		
		public Feedback()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feedbackid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int feedbackid
		{
			get
			{
				return this._feedbackid;
			}
			set
			{
				if ((this._feedbackid != value))
				{
					this.OnfeedbackidChanging(value);
					this.SendPropertyChanging();
					this._feedbackid = value;
					this.SendPropertyChanged("feedbackid");
					this.OnfeedbackidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feedbackname", DbType="VarChar(225)")]
		public string feedbackname
		{
			get
			{
				return this._feedbackname;
			}
			set
			{
				if ((this._feedbackname != value))
				{
					this.OnfeedbacknameChanging(value);
					this.SendPropertyChanging();
					this._feedbackname = value;
					this.SendPropertyChanged("feedbackname");
					this.OnfeedbacknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feedbackemail", DbType="VarChar(225)")]
		public string feedbackemail
		{
			get
			{
				return this._feedbackemail;
			}
			set
			{
				if ((this._feedbackemail != value))
				{
					this.OnfeedbackemailChanging(value);
					this.SendPropertyChanging();
					this._feedbackemail = value;
					this.SendPropertyChanged("feedbackemail");
					this.OnfeedbackemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feedbackmessage", DbType="VarChar(225)")]
		public string feedbackmessage
		{
			get
			{
				return this._feedbackmessage;
			}
			set
			{
				if ((this._feedbackmessage != value))
				{
					this.OnfeedbackmessageChanging(value);
					this.SendPropertyChanging();
					this._feedbackmessage = value;
					this.SendPropertyChanged("feedbackmessage");
					this.OnfeedbackmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feedbacksubject", DbType="VarChar(225)")]
		public string feedbacksubject
		{
			get
			{
				return this._feedbacksubject;
			}
			set
			{
				if ((this._feedbacksubject != value))
				{
					this.OnfeedbacksubjectChanging(value);
					this.SendPropertyChanging();
					this._feedbacksubject = value;
					this.SendPropertyChanged("feedbacksubject");
					this.OnfeedbacksubjectChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Posts")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _postsid;
		
		private string _posttitle;
		
		private System.Nullable<int> _cuisineid;
		
		private string _writtencontent;
		
		private string _headerimage;
		
		private System.Nullable<int> _userid;
		
		private System.Nullable<System.DateTime> _date_added;
		
		private EntitySet<PostsTagMapper> _PostsTagMappers;
		
		private EntitySet<Rating> _Ratings;
		
		private EntityRef<Cuisine> _Cuisine;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpostsidChanging(int value);
    partial void OnpostsidChanged();
    partial void OnposttitleChanging(string value);
    partial void OnposttitleChanged();
    partial void OncuisineidChanging(System.Nullable<int> value);
    partial void OncuisineidChanged();
    partial void OnwrittencontentChanging(string value);
    partial void OnwrittencontentChanged();
    partial void OnheaderimageChanging(string value);
    partial void OnheaderimageChanged();
    partial void OnuseridChanging(System.Nullable<int> value);
    partial void OnuseridChanged();
    partial void Ondate_addedChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_addedChanged();
    #endregion
		
		public Post()
		{
			this._PostsTagMappers = new EntitySet<PostsTagMapper>(new Action<PostsTagMapper>(this.attach_PostsTagMappers), new Action<PostsTagMapper>(this.detach_PostsTagMappers));
			this._Ratings = new EntitySet<Rating>(new Action<Rating>(this.attach_Ratings), new Action<Rating>(this.detach_Ratings));
			this._Cuisine = default(EntityRef<Cuisine>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postsid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int postsid
		{
			get
			{
				return this._postsid;
			}
			set
			{
				if ((this._postsid != value))
				{
					this.OnpostsidChanging(value);
					this.SendPropertyChanging();
					this._postsid = value;
					this.SendPropertyChanged("postsid");
					this.OnpostsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_posttitle", DbType="VarChar(225)")]
		public string posttitle
		{
			get
			{
				return this._posttitle;
			}
			set
			{
				if ((this._posttitle != value))
				{
					this.OnposttitleChanging(value);
					this.SendPropertyChanging();
					this._posttitle = value;
					this.SendPropertyChanged("posttitle");
					this.OnposttitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cuisineid", DbType="Int")]
		public System.Nullable<int> cuisineid
		{
			get
			{
				return this._cuisineid;
			}
			set
			{
				if ((this._cuisineid != value))
				{
					if (this._Cuisine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncuisineidChanging(value);
					this.SendPropertyChanging();
					this._cuisineid = value;
					this.SendPropertyChanged("cuisineid");
					this.OncuisineidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_writtencontent", DbType="VarChar(MAX)")]
		public string writtencontent
		{
			get
			{
				return this._writtencontent;
			}
			set
			{
				if ((this._writtencontent != value))
				{
					this.OnwrittencontentChanging(value);
					this.SendPropertyChanging();
					this._writtencontent = value;
					this.SendPropertyChanged("writtencontent");
					this.OnwrittencontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_headerimage", DbType="VarChar(225)")]
		public string headerimage
		{
			get
			{
				return this._headerimage;
			}
			set
			{
				if ((this._headerimage != value))
				{
					this.OnheaderimageChanging(value);
					this.SendPropertyChanging();
					this._headerimage = value;
					this.SendPropertyChanged("headerimage");
					this.OnheaderimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="Int")]
		public System.Nullable<int> userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime")]
		public System.Nullable<System.DateTime> date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_PostsTagMapper", Storage="_PostsTagMappers", ThisKey="postsid", OtherKey="postsid")]
		public EntitySet<PostsTagMapper> PostsTagMappers
		{
			get
			{
				return this._PostsTagMappers;
			}
			set
			{
				this._PostsTagMappers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Rating", Storage="_Ratings", ThisKey="postsid", OtherKey="postsid")]
		public EntitySet<Rating> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cuisine_Post", Storage="_Cuisine", ThisKey="cuisineid", OtherKey="cuisineid", IsForeignKey=true)]
		public Cuisine Cuisine
		{
			get
			{
				return this._Cuisine.Entity;
			}
			set
			{
				Cuisine previousValue = this._Cuisine.Entity;
				if (((previousValue != value) 
							|| (this._Cuisine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cuisine.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._Cuisine.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._cuisineid = value.cuisineid;
					}
					else
					{
						this._cuisineid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cuisine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Post", Storage="_User", ThisKey="userid", OtherKey="userid", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._userid = value.userid;
					}
					else
					{
						this._userid = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PostsTagMappers(PostsTagMapper entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_PostsTagMappers(PostsTagMapper entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
		
		private void attach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Newsletter")]
	public partial class Newsletter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _newsid;
		
		private string _newstitle;
		
		private string _newssubject;
		
		private string _newscontent;
		
		private string _header;
		
		private string _footer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnewsidChanging(int value);
    partial void OnnewsidChanged();
    partial void OnnewstitleChanging(string value);
    partial void OnnewstitleChanged();
    partial void OnnewssubjectChanging(string value);
    partial void OnnewssubjectChanged();
    partial void OnnewscontentChanging(string value);
    partial void OnnewscontentChanged();
    partial void OnheaderChanging(string value);
    partial void OnheaderChanged();
    partial void OnfooterChanging(string value);
    partial void OnfooterChanged();
    #endregion
		
		public Newsletter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newsid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int newsid
		{
			get
			{
				return this._newsid;
			}
			set
			{
				if ((this._newsid != value))
				{
					this.OnnewsidChanging(value);
					this.SendPropertyChanging();
					this._newsid = value;
					this.SendPropertyChanged("newsid");
					this.OnnewsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newstitle", DbType="VarChar(225)")]
		public string newstitle
		{
			get
			{
				return this._newstitle;
			}
			set
			{
				if ((this._newstitle != value))
				{
					this.OnnewstitleChanging(value);
					this.SendPropertyChanging();
					this._newstitle = value;
					this.SendPropertyChanged("newstitle");
					this.OnnewstitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newssubject", DbType="VarChar(225)")]
		public string newssubject
		{
			get
			{
				return this._newssubject;
			}
			set
			{
				if ((this._newssubject != value))
				{
					this.OnnewssubjectChanging(value);
					this.SendPropertyChanging();
					this._newssubject = value;
					this.SendPropertyChanged("newssubject");
					this.OnnewssubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newscontent", DbType="VarChar(225)")]
		public string newscontent
		{
			get
			{
				return this._newscontent;
			}
			set
			{
				if ((this._newscontent != value))
				{
					this.OnnewscontentChanging(value);
					this.SendPropertyChanging();
					this._newscontent = value;
					this.SendPropertyChanged("newscontent");
					this.OnnewscontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_header", DbType="VarChar(225)")]
		public string header
		{
			get
			{
				return this._header;
			}
			set
			{
				if ((this._header != value))
				{
					this.OnheaderChanging(value);
					this.SendPropertyChanging();
					this._header = value;
					this.SendPropertyChanged("header");
					this.OnheaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_footer", DbType="VarChar(225)")]
		public string footer
		{
			get
			{
				return this._footer;
			}
			set
			{
				if ((this._footer != value))
				{
					this.OnfooterChanging(value);
					this.SendPropertyChanging();
					this._footer = value;
					this.SendPropertyChanged("footer");
					this.OnfooterChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
